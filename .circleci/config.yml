version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.1.3

jobs:
  terratest:
    docker:
      - image: bensh99/circleci-terratest:latest
    steps:
      - run:
          name: clone infra and helm repo's
          command: |
            git clone https://$INFRA_REPO_TOKEN@github.com/bensh199/WeatherApp-infra.git
            git clone https://$TF_VAR_HELM_REPO_PAT@github.com/bensh199/WeatherApp-Helm.git

      - run:
          name: update kube config
          command: |
            aws eks update-kubeconfig --name Lab4-EKS-tf --region il-central-1

      - run:
          name: run terratest
          command: |
            export TF_VAR_ROOT_PATH=$(pwd)
            export KUBE_CONFIG_PATH=~/.kube/config
            env
            cd WeatherApp-infra/Terraform/Terraform-modules/Tests
            go mod init test
            go mod tidy
            go test -v -timeout 30m

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory in the execution
          # environment which is taken to be the root directory of the workspace.
          root: /home/circleci/.kube
          # Must be relative path from root
          paths:
            - config
          

  build:
    docker:
      - image: cimg/base:current
    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: login to dockerhub
          command: docker login -u $DOCKER_HUB_USER	 -p $DOCKER_HUB_TOKEN

      - run:
          name: build image
          command: |
            docker build -t bensh99/weatherapp:V1.<< pipeline.number >> ./Python-Project/.
            docker tag bensh99/weatherapp:V1.<< pipeline.number >> bensh99/weatherapp-features:V1.<< pipeline.number >>
            docker tag bensh99/weatherapp:V1.<< pipeline.number >> bensh99/weatherapp-features:latest
      
      - run:
          name: publish docker pre-test
          command: |
            docker push bensh99/weatherapp-features:V1.<< pipeline.number >>
            docker push bensh99/weatherapp-features:latest
      
      # - run:
      #     name: save image as artifact
      #     command: |
      #       docker save bensh99/weatherapp-features:V1.<< pipeline.number >> > /home/circleci/project/bensh99/weatherapp-features:V1.<< pipeline.number >>.tar

      # - store_artifacts:
      #     path: /home/circleci/project
      #     destination: bensh99/weatherapp-features:V1.<< pipeline.number >>.tar

  test:
    docker:
      - image: cimg/python:3.12.3
    steps:
      - setup_remote_docker:
          docker_layer_caching: true

      - checkout

      - run:
          name: install python libraries
          command: |
            pip install requests

      - run:
          name: test new image
          command: |
            pwd
            ls -laR
            docker pull bensh99/weatherapp-features:V1.<< pipeline.number >>
            docker run --rm --name weatherapp -p 8000:8000 -d bensh99/weatherapp-features:V1.<< pipeline.number >>
            python3 Python-Project/test.py

  publish:
    docker:
      - image: cimg/base:2024.05
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      
      - run:
          name: login to dockerhub
          command: docker login -u $DOCKER_HUB_USER	 -p $DOCKER_HUB_TOKEN

      - run:
          name: publish to production
          command: |
            docker pull bensh99/weatherapp-features:V1.<< pipeline.number >>
            docker tag bensh99/weatherapp-features:V1.<< pipeline.number >> bensh99/weatherapp:V1.<< pipeline.number >>
            docker tag bensh99/weatherapp-features:V1.<< pipeline.number >> bensh99/weatherapp:latest
            docker push bensh99/weatherapp:V1.<< pipeline.number >>
            docker push bensh99/weatherapp:latest

  deploy:
    docker:
      - image: bensh99/circleci-terratest:latest
    steps:
      - run:
          command: |
            export ROOT_PATH=$(pwd)
            git clone https://$TF_VAR_HELM_REPO_PAT@github.com/bensh199/WeatherApp-Helm.git
            cd WeatherApp-Helm
            git config --global user.email $GITHUB_EMAIL
            sh 'git config --global user.name $GITHUB_USERNAME 
            chmod +x $ROOT_PATH/WeatherApp-Helm/version.sh
            ./WeatherApp-Helm/version.sh V1.<< pipeline.number >> $ROOT_PATH
            git commit -am "CircleCI Action: helm values have been updated, pipeline number: << pipeline.number >>"
            
      # - run:
      #     name: setup kubeconfig
      #     command: |
      #       mkdir -p /home/.kube

      # - attach_workspace:
      #     at: /home/.kube

      # - run:
      #     name: install argocd
      #     command: |
      #       curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
      #       sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
      #       rm argocd-linux-amd64

      # - run:
      #     name: login to the argocd server
      #     command: |
      #       export KUBE_CONFIG_PATH=/home/circleci/.kube/config
      #       ARGOCD_ADMIN_PASS=argocd admin initial-password - argocd
      #       argocd login argocd.whats-the-weather.com:443 --username admin --password $ARGOCD_ADMIN_PASS

      # - run:
      #     name: clone and update helm repo
      #     command: |
      #       git clone https://$HELM_REPO_TOKEN@github.com/bensh199/WeatherApp-Helm.git
      #       cd ./WeatherApp-Helm
      #       chmod +x ./version.sh
      #       ./version.sh << pipeline.number >>

      # - run:
      #     name: deploy the app
      #     command: |
      #       argocd repo add https://github.com/bensh199/WeatherApp-Helm --username bensh99 --password $REPO_TOKEN
      #       kubectl apply -f WeatherApp-Helm/application.yaml

workflows:
  test-terraform-and-deploy-infra:
      jobs:
        - terratest:
            filters:
              branches:
                only:
                  - main
                  # - production

  build-test-and-deploy-image:
    jobs:
      - build:
          filters:
            branches:
              only:
                - dev
                - main
                - production
      - test:
          filters:
            branches:
              only:
                - dev
                - main
                - production
          requires:
            - build
      - publish:
          filters:
            branches:
              only:
                - dev
                - main
                - production
          requires:
            - test

  deploy-to-production:
    jobs:
      - hold:
          type: approval
          filters:
            branches:
              only:
                - production
      - deploy:
          filters:
            branches:
              only:
                - production
          requires:
            - hold